# Project Setup and Run Guide
# Excel Analytics Application with Admin Panel

## Prerequisites
1. Node.js (version 14 or higher)
2. MongoDB (local installation or MongoDB Atlas account)
3. Git (optional, for version control)

## Step-by-Step Setup Instructions

### Step 1: Install Dependencies
Open terminal/command prompt and navigate to the project directory:
```
cd E:\internship\github\1
```

Install main project dependencies:
```
npm install
```

Install backend dependencies:
```
cd backend
npm install
```

Install frontend dependencies:
```
cd ../frontend
npm install
```

Go back to root directory:
```
cd ..
```

### Step 2: Environment Setup
1. Check if .env file exists in backend folder:
   - File location: E:\internship\github\1\backend\.env
   - Should contain MongoDB connection string and JWT secret

2. If .env doesn't exist, create it with:
```
MONGO_URI=mongodb://localhost:27017/excel_analytics_backend
JWT_SECRET=your_jwt_secret_key_here
```

### Step 3: Start MongoDB
- If using local MongoDB: Start MongoDB service
- If using MongoDB Atlas: Ensure connection string in .env is correct

### Step 4: Run the Application
From the root directory (E:\internship\github\1), run:
```
npm run dev
```

This command will start both backend and frontend simultaneously:
- Backend will run on: http://localhost:1000
- Frontend will run on: http://localhost:3000

### Step 5: Access the Application

#### For Regular Users:
1. Open browser and go to: http://localhost:3000
2. Click "Login/Signup" to register a new account
3. After registration, login with your credentials
4. Access all user features

#### For Admin Access:
1. Open browser and go to: http://localhost:3000
2. Click "Admin Login" button in the navigation bar
3. Login with admin credentials:
   - Username: Admin
   - Password: admin@1234
4. You'll be redirected to Admin Dashboard at: http://localhost:3000/admin-dashboard

### Step 6: Admin Panel Features

#### Admin Login Credentials:
- Username: Admin
- Password: admin@1234

#### Admin Panel Functions:
1. **View Users**: See all registered users (excludes admin accounts)
2. **Edit Users**: Click "Edit" button to modify user name and email
3. **Delete Users**: Click "Delete" button to remove users (with confirmation)
4. **Admin Logout**: Use "Admin Logout" button to logout

#### If No Users Found in Admin Panel:
Option 1 - Register New Users:
1. Go to regular user signup page
2. Create one or more user accounts
3. Return to admin panel to see the users

Option 2 - Create Demo Users (for testing):
1. Login as admin
2. Open browser developer console (F12)
3. Run this command:
```javascript
fetch('http://localhost:1000/api/auth/create-demo-users', {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${localStorage.getItem('token')}`
  }
})
.then(res => res.json())
.then(data => console.log(data.message));
```
4. Refresh the admin dashboard page

### Step 7: Navigation Features

#### Regular User Navigation:
- Home
- Features
- Login/Signup
- Admin Login (link to admin panel)

#### Admin Navigation:
- User Management (admin dashboard)
- Admin Logout
- Shows "Admin: [Name]" instead of regular user greeting

### Step 8: Troubleshooting

#### Common Issues:
1. **Port already in use**: 
   - Kill processes using ports 3000 or 1000
   - Or change ports in package.json

2. **MongoDB connection error**:
   - Ensure MongoDB is running
   - Check .env file connection string

3. **No users in admin panel**:
   - Register at least one regular user
   - Or use the demo users script (Step 6)

4. **Admin login not working**:
   - Ensure exact credentials: Username="Admin", Password="admin@1234"
   - Check browser console for errors

#### Stopping the Application:
- Press Ctrl+C in the terminal where the app is running
- This will stop both backend and frontend servers

### Step 9: Project Structure
```
E:\internship\github\1\
├── backend/
│   ├── models/          # Database models
│   ├── routes/          # API routes
│   ├── middleware/      # Authentication middleware
│   ├── .env            # Environment variables
│   └── server.js       # Backend server
├── frontend/
│   ├── src/
│   │   ├── components/ # React components
│   │   ├── pages/      # React pages
│   │   └── styles/     # CSS files
│   └── package.json
├── package.json        # Main package file
└── run.txt            # This guide

```

### Step 10: Available Features

#### User Features:
- User registration and login
- Excel file upload and analysis
- Data visualization with charts
- File management

#### Admin Features:
- Secure admin login
- View all registered users
- Edit user information (name, email)
- Delete users with confirmation
- Responsive admin dashboard
- Admin-specific navigation

### Additional Notes:
- Admin accounts are created automatically on first admin login
- User passwords are encrypted using bcrypt
- JWT tokens are used for authentication
- All admin routes are protected and require admin role
- The application uses MongoDB for data storage
- Frontend is built with React and backend with Node.js/Express

### Security Features:
- Separate admin authentication system
- Role-based access control
- Protected admin routes
- Password hashing
- JWT token validation

For any issues or questions, check the browser console and backend terminal for error messages.
